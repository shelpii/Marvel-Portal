{"version":3,"file":"static/js/193.8f5a41b4.chunk.js","mappings":"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","sources":["Components/errorMessage/ErrorMessage.js","Components/appBanner/AppBanner.js","Components/comicsList/ComicsList.js","Components/pages/ComicsPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import error from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={error}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport './comicsList.scss';\n\n\n\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n   const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(ended)\n    }\n\n\n    function renderComics(arr) {\n        const comics =  arr.map((comics, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${comics.id}`}>\n                        <img src={comics.thumbnail} alt={comics.title}  className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{comics.title}</div>\n                        <div className=\"comics__item-price\">{comics.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {comics}\n            </ul>\n        )\n    }\n        \n        const items = renderComics(comicsList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\n    return (\n        <div className=\"comics__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\"\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, {method,body,headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1b99ce4d7a44ec18dc406f6e31570b14';\r\n    const _baseOffset = 500;\r\n\r\n    const getAllCharacters = async(offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id:char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 220)}...` : \"This character haven't description\",\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async(offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async(id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\"\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","error","AppBanner","_jsxs","className","children","avengers","alt","avengersLogo","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","comics","map","i","Link","to","concat","id","thumbnail","title","price","renderComics","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic"],"sourceRoot":""}