{"version":3,"file":"static/js/567.7dae0fdb.chunk.js","mappings":"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","sources":["Components/errorMessage/ErrorMessage.js","Components/randomChar/RandomChar.js","Components/charList/CharList.js","Components/skeleton/Skeleton.js","Components/charInfo/CharInfo.js","Components/errorBoundary/ErrorBoundary.js","Components/pages/MainPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import error from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={error}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(510);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n   const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const charRefs = useRef([]);\n\n    const onCharActive = (index) => {\n        charRefs.current.forEach(item => {\n            item.classList.remove('char__item_selected')\n        })\n        charRefs.current[index].classList.add('char__item_selected');\n        charRefs.current[index].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items =  arr.map((item, index) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id) \n                        onCharActive(index)\n                    }}\n                    ref={el => charRefs.current[index] = el}\n                    >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n        \n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n\n\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from '../skeleton/Skeleton'\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n\n  const [char, setChar] = useState(null);\n\n  const {loading, error, getCharacter, clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId])\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n\n  const skeleton = char || loading || error ? null : <Skeleton/>;\n  const errorMessage = error ? <ErrorMessage/> : null;\n  const spinner = loading ? <Spinner/> : null;\n  const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n  return (\n      <div className=\"char__info\">\n          {skeleton}\n          {errorMessage}\n          {spinner}\n          {content}\n      </div>\n  )\n}\n\nconst View = ({ char }) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle}/>\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n        {description}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {\n            comics.length > 0 ? null : \"This characters haven't comics\"\n        }\n\n        {\n            comics.map((item, i) => {\n                // eslint-disable-next-line\n                if(i > 9) return;\n                return (\n                    <li key={i} className=\"char__comics-item\">{item.name}</li>\n                )\n            })\n        }\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, {method,body,headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1b99ce4d7a44ec18dc406f6e31570b14';\r\n    const _baseOffset = 500;\r\n\r\n    const getAllCharacters = async(offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id:char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 220)}...` : \"This character haven't description\",\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async(offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async(id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\"\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","error","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","alt","href","RandomChar","setChar","useState","loading","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","charRefs","useRef","items","arr","map","item","index","onCharSelected","current","forEach","classList","remove","add","focus","onCharActive","ref","el","renderItems","disabled","Skeleton","_Fragment","comics","i","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}