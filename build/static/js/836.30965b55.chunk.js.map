{"version":3,"file":"static/js/836.30965b55.chunk.js","mappings":"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","sources":["Components/errorMessage/ErrorMessage.js","Components/pages/SingleComicPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import error from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={error}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './singleComicPage.scss';\r\n\r\n\r\nconst SingleComicPage = () => {\r\n\r\n    const { comicId } = useParams();\r\n    const [comic, setComic] = useState(0);\r\n\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n      }, [comicId])\r\n    \r\n      const updateComic = () => {\r\n\r\n        clearError();\r\n        getComic(comicId)\r\n          .then(onComicLoaded)\r\n      };\r\n    \r\n      const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n      };\r\n\r\n      const errorMessage = error ? <ErrorMessage/> : null;\r\n      const spinner = loading ? <Spinner/> : null;\r\n      const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n\r\n    return (\r\n        <>\r\n          {errorMessage}\r\n          {spinner}\r\n          {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">{language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, {method,body,headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1b99ce4d7a44ec18dc406f6e31570b14';\r\n    const _baseOffset = 500;\r\n\r\n    const getAllCharacters = async(offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id:char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 220)}...` : \"This character haven't description\",\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async(offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async(id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\"\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","error","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","alt","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}